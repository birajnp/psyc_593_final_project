---
title: "codes"
format: html
editor: visual
echo: false
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

# #Loading required packages for the study

```{r}
# Project : Do Adolescents Emotions Turn into Physical Outbursts?
# load packages

packages <- c("gtsummary","foreign","survey",'labelled',"readxl", "tidyverse",
              "haven","rockchalk", "forcats", "data.table", "Hmisc", "srvyr", "here")

new_packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages, dependencies = T)

#load libraries
invisible(lapply(packages, require, character.only=T))

```

# #Loading data for every countries

```{r}
# read data set
# Data Set Afghanistan 2014

data_afghanisthan <- read_dta(here("data","raw_datasets", 
                                   "1_Afghanistan2014.dta"))
data_afghanisthan <- forcats::as_factor(data_afghanisthan, only_labelled = TRUE)

# fwrite(data.table(Column_Name = names(data_afghanisthan), 
#                   Label = sapply(var_label(data_afghanisthan), 
#                                  function(x) ifelse(is.null(x), "", x))),
#       "column_labels_afghanisthan.txt", sep = ";", 
#        col.names = TRUE, 
#        row.names = FALSE)


# Data Set Bangladesh 2014
data_bangladesh <- read_dta(here("data","raw_datasets","2_Bangladesh2014.dta"))
data_bangladesh <- forcats::as_factor(data_bangladesh, only_labelled = TRUE)

# education code to actual grade on bangladesh data
data_bangladesh <- data_bangladesh %>% mutate (Q3 = case_when( 
                                              Q3 == "M 3" ~ "Class 7",
                                               Q3 == "M 4" ~ "Class 8",
                                               Q3 == "M 5" ~ "Class 9",
                                               Q3 == "M 6" ~ "Class 10", 
                                               Q3 == NA ~ NA ))


# # Write the data.table to a file while replacing NULL values 
# fwrite(data.table(Column_Name = names(data_bangladesh), 
#                   Label = sapply(var_label(data_bangladesh), 
#                                  function(x) ifelse(is.null(x), "", x))),
#       "column_labels_afghanisthan.txt", sep = ";", 
#        col.names = TRUE, 
#        row.names = FALSE)


#Data set Bhutan 2016

data_bhutan <- read_dta(here("data", "raw_datasets", "3_Bhutan2016.dta"))
data_bhutan <- forcats::as_factor(data_bhutan, only_labelled = TRUE)

# # Write the data.table to a file while replacing NULL values 
# here(fwrite(data.table(Column_Name = names(data_bhutan), 
#                   Label = sapply(var_label(data_bhutan), 
#                                  function(x) ifelse(is.null(x), "", x))),
#        "column_labels_bhutan.txt", sep = ";", 
#        col.names = TRUE, 
#        row.names = FALSE))


# Data Set Maldives 2014

data_maldives <- read_dta(here("data","raw_datasets", "4_Maldives2014.dta"))
data_maldives <- forcats::as_factor(data_maldives, only_labelled = TRUE)

# Write the data.table to a file while replacing NULL values 
# fwrite(data.table(Column_Name = names(data_maldives), 
#                   Label = sapply(var_label(data_maldives), 
#                                  function(x) ifelse(is.null(x), "", x))),
#       "column_labels_maldives.txt", sep = ";", 
#        col.names = TRUE, 
#        row.names = FALSE)




# Data Set Nepal 2015

data_nepal <- read_dta(here("data","raw_datasets", "5_Nepal2015.dta"))
data_nepal <- forcats::as_factor(data_nepal, only_labelled = TRUE)

# fwrite(data.table(Column_Name = names(data_nepal), 
#                   Label = sapply(var_label(data_nepal), 
#                                  function(x) ifelse(is.null(x), "", x))),
#        "column_labels_nepal.txt", sep = ";",
#        col.names = TRUE, 
#        row.names = FALSE
#        )

# Data Set Srilanka 2016

data_srilanka <- read_dta(here("data","raw_datasets", "6_Srilanka2016.dta"))
data_srilanka <- forcats::as_factor(data_srilanka, only_labelled = TRUE)

# fwrite(data.table(Column_Name = names(data_srilanka), 
#                   Label = sapply(var_label(data_srilanka), 
#                                  function(x) ifelse(is.null(x), "", x))),
#       "column_labels_srilanka.txt", sep = ";", 
#        col.names = TRUE, 
#        row.names = FALSE
```

```{r}
table(data_afghanisthan$Q16)

```

# #Extracting variable names and their associated labels to understand the data-set

```{r}

# function to get variable labels (if present) or just names
get_var_label <- function (data, dataset_name) {
                  data.frame (
                    Column_Name = colnames(data),
                    Label = sapply(var_label (data), 
                     function(x) ifelse(is.null(x), "", x)),
                    Dataset = dataset_name )}

# Get variable labels from each dataset
afghanisthan_labels <- get_var_label (data_afghanisthan, "Afghanisthan")

bangladesh_labels <- get_var_label (data_bangladesh, "Bangladesh")

bhutan_labels <- get_var_label (data_bhutan, "Bhutan")

maldives_labels <- get_var_label (data_maldives, "Maldives")

nepal_labels <- get_var_label (data_nepal, "Nepal")

srilanka_labels <- get_var_label (data_srilanka, "Srilanka")

# Combine all labels into one data frame
combined_label <- bind_rows(afghanisthan_labels, bangladesh_labels, bhutan_labels,                   maldives_labels, nepal_labels, srilanka_labels )

# Write the combined labels to a CSV file for comparison
#write_csv(combined_label, 'combined_data_labels_raw.csv')

```

# #Procedure to combine data set, from our analysis we saw that the data file doesn't have consistent name so we need to lowercase the variable name across all data set.

```{r}
# lower casing the variables name

names(data_afghanisthan) <- tolower(names(data_afghanisthan))

names(data_bangladesh) <- tolower(names(data_bangladesh))

names(data_bhutan) <- tolower(names(data_bhutan))

names(data_maldives) <- tolower(names(data_maldives))

names(data_nepal) <- tolower(names(data_nepal))

names(data_srilanka) <- tolower(names(data_srilanka))
```

##Selecting and defining variable names for our study.

```{r}
sum(is.na(df$q4))
sum(is.na(df$q5))

```

```{r}
#selecting variables and assigning it to as a cor_vars
core_vars <- c(
        # independent variables
        'q1', 'q2', 'q3',                         # Age, Sex, grade
        'q6', # Hunger questionnaire proxy for socioeconomic status
        'q4', 'q5',  # how tall are you, how much do you weight
        'q17',  #Seriously injured
        'q18', #Serious injury type
        #'q19', #Serious injury cause (missing in bangladesh)
        
        'q20', 'q22', 'q23',     # 'q21' missing in bangladesh)   # bullied, bullied how,  Mental health: Felt lonely, could not sleep
        'q24', 'q25', 'q26', 'q27',  # suicide and other mental health
        'q28', 'q29', 'q30', 'q33',   # Tobacco use: Initiation, current use, cessation, exposure, parental use
        #'q34', 'q35',  # Alcohol use: Initiation, current use, frequency, source, effects (afghanistan missing this variable)
        'q40','q41', 'q42',  #other drugs and marijuana 
        'q56', 'q57', 'q58',        # parent understand problem, know about free time, go through things
        'q53', 'q54', # CLASS ATTENDANCE AND PEER SUPPORT
        
        #outcome variables
        'q16','q17',  #physically attacked      # Physical fighting
      
        #sample weight and related variable
        'weight', 'stratum', 'psu' )                # Sample weights and design variables


# Subset the data sets to include only the selected variables
af_selected <- data_afghanisthan %>% select(all_of(core_vars))

bd_selected <- data_bangladesh %>% select(all_of(core_vars))

bt_selected <- data_bhutan %>% select(all_of(core_vars))

md_selected <- data_maldives %>% select(all_of(core_vars))

np_selected <- data_nepal %>% select(all_of(core_vars))

sl_selected <- data_srilanka %>% select(all_of(core_vars))

# extracting column name for each dataset
af_cols <- names(af_selected) #Afghanisthan

bd_cols <- names(bd_selected) #Bangladesh

bt_cols <- names(bt_selected) #Bhutan

md_cols <- names(md_selected) #Maldives

np_cols <- names(np_selected) #Nepal

sl_cols <- names(sl_selected) #Srilanka

# Checking if column names match across all datasets
cols_match <- cols_match <- all(
  bd_cols == bt_cols & 
    bt_cols == np_cols & 
    np_cols == md_cols & 
    md_cols == af_cols & 
    af_cols == sl_cols
)

cols_match

# required as some data type differed function to convert all columns to factors
convert_all_to_factors <- function(df) {
  df %>%
    mutate(across(everything(), ~ as.factor(.)))
}

# Conversion function to convert all columns to factors for each dataset
af_selected <- convert_all_to_factors(af_selected)  # Afghanistan
bd_selected <- convert_all_to_factors(bd_selected)  # Bangladesh
bt_selected <- convert_all_to_factors(bt_selected)  # Bhutan
md_selected <- convert_all_to_factors(md_selected)  # Maldives
np_selected <- convert_all_to_factors(np_selected)  # Nepal
sl_selected <- convert_all_to_factors(sl_selected)  # Sri Lanka


# Ensure all datasets have the same columns as Nepal
af_selected <- af_selected %>%
  select(all_of(names(np_selected)))


bd_selected <- bd_selected %>%
  select(all_of(names(np_selected)))

bt_selected <- bt_selected %>%
  select(all_of(names(np_selected)))

md_selected <- md_selected %>%
  select(all_of(names(np_selected)))

sl_selected <- sl_selected %>%
  select(all_of(names(np_selected)))

# Add country labels to the datasets
af_selected$country <- "Afghanistan"
bd_selected$country <- "Bangladesh"
bt_selected$country <- "Bhutan"
md_selected$country <- "Maldives"
np_selected$country <- "Nepal"
sl_selected$country <- "Sri Lanka"

# Bind the rows of all selected datasets
df <- bind_rows(af_selected, bd_selected, bt_selected, md_selected, np_selected, sl_selected)

# Copy the labels from the Nepal dataset to the combined dataframe
df <- labelled::copy_labels(np_selected, df)

#csv file of final data

saveRDS(df, here('data', 'clean_dataset', 'clean_dataset_for_analysis.rds'))
```

# #clearing the previous environment and loading packages

```{r}
rm(list=ls())

packages <- c("gtsummary","foreign","survey",'labelled',"readxl", "tidyverse",
              "haven","rockchalk", "forcats", "data.table", "Hmisc", "srvyr", "here")

new_packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages, dependencies = T)

#load libraries
invisible(lapply(packages, require, character.only=T))
```

```{r}
#read clean dataset for analysis
df <- readRDS(here('data', 'clean_dataset', 'clean_dataset_for_analysis.rds'))


```

## #Cleaning Variables for Analysis

```{r}
#lowercasing all the row names in df
names(df) <- tolower(names(df))

#categorization of age in new variable age_category
df <- mutate(df,
        age_category = case_when(
          q1 == '11 years old or younger' ~ '11 years old or younger',
          q1 %in% c("12 years old", "13 years old", "14 years old") ~ "12 to 14 years",
          q1 %in% c("15 years old", "16 years old", '17 years old') ~ "15 to 17 years",
          q1 == '18 years old or older' ~ '18 years old or older',
          TRUE ~ NA_character_
        ))

#' categorization of data female 0 and Male 1 in sex_category variable

# df <- mutate(df,
#              sex_category = ifelse(q2 == "Male", '1',
#                                    ifelse(q2 == "Female",'0', q2)))


# Felt lonely binary
df <- mutate(df,
  felt_lonely = case_when(
    q22 %in% c("Never", "Rarely") ~ "0",
    q22 %in% c("Sometimes", "Most of the time", "Always") ~ "1",
    TRUE ~ q22
  ))





# couldn't sleep q23 bianary

df <- mutate(df,
            couldnot_sleep = case_when(
              q23 %in% c("Never", "Rarely") ~ "0",
              q23 %in% c("Sometimes", "Most of the time", "Always") ~ "1",
              TRUE ~ q23))



# q24 considered suicide
df <- mutate(df,
              considered_suicide = case_when(
                    q24 == "No" ~ "0",
                    q24 == "Yes" ~ "1",
                    TRUE ~ q24))
             
             
# q25 made suicide plan

df <- mutate(df,
             made_suicide_pan = ifelse(q25 == "N0" , "0",
                                         ifelse(q25 == "Yes", "0", q25)))

# q26 attempted suicide

df <- mutate(df,
             attempted_suicide = ifelse(q26 == "0 times" , "0",
                                         ifelse(q26 == "1 time", "1",
                                         ifelse(q26 == "2 or 3 times", "1",
                                         ifelse(q26 == "4 or 5 times", 1,
                                         ifelse(q26 == "6 or more times", "1", q26))))))


# participants current smoking status q29 No = 0 and Yes = 1
# question smoked in last 30 days
df <- mutate(df,
             smoking_status = ifelse(q29 == "0 days" , 0,
                                ifelse(q29 == "1 or 2 days", 1,
                                  ifelse(q29 == "3 to 5 days", 1,
                                    ifelse(q29 == "6 to 9 days", 1,
                                      ifelse(q29 == "10 to 19 days", 1,
                                       ifelse(q29 == "20 to 29 days", 1,
                                        ifelse(q29 == "All 30 days", 1, q29)))))))) 



# smoking frequency o = Never, 1-9 days = sometimes, 
 
# Smoking frequency
df <- mutate(df,
      smoking_frequency = case_when(
        q29 == "0 days" ~ "Never",
        q29 %in% c("1 or 2 days", "3 to 5 days", "6 to 9 days") ~ "Sometimes",
        q29 == "10 to 19 days" ~ "Most of the times",
        q29 %in% c("20 to 29 days", "All 30 days") ~ "Everyday",
        TRUE ~ q29
      ))


# question other tobacco use in last 30 days
df <- mutate(df,
             other_tobacco_use = ifelse(q30 == "0 days" , 0,
                                 ifelse(q30 == "1 or 2 days", 1,
                                 ifelse(q30 == "3 to 5 days", 1,
                                 ifelse(q30 == "6 to 9 days", 1,
                                 ifelse(q30 == "10 to 19 days", 1,
                                 ifelse(q30 == "20 to 29 days", 1,
                                 ifelse(q30 == "All 30 days", 1, q30))))))))

df <- mutate(df,
    other_tobacco_use_freq =ifelse(q30 == "0 days" , "Never",
                            ifelse(q30 == "1 or 2 days", 'Sometimes',
                            ifelse(q30 == "3 to 5 days", 'Sometimes',
                            ifelse(q30 == "6 to 9 days", 'Sometimes',
                            ifelse(q30 == "10 to 19 days", 'Most of the times',
                            ifelse(q30 == "20 to 29 days", 'Everyday',
                            ifelse(q30 == "All 30 days", 'Everyday', q30)))))))) 

# current marijuana use yes = 1 no = 0

df <- mutate(df,
             current_marijuna_use = ifelse(q42 == "0 times" , 0,
                                    ifelse(q42== "1 or 2 times", 1,
                                    ifelse(q42 == "3 to 9 times", 1,
                                    ifelse(q42 == "10 to 19 times", 1,
                                    ifelse(q42 == "20 or more times", 1, q42))))))


df <- mutate(df,
             marijuna_use_frequency = ifelse(q29 == "0 times" , "Never",
                                      ifelse(q29 == "1 or 2 times", 'Sometimes',
                                      ifelse(q29 == "3 to 9 times", 'Sometimes',
                                      ifelse(q29 == "10 to 19 times", 'Most of the times',
                                      ifelse(q29 == "10 to 19 days", 'Most of the times',
                                      ifelse(q29 == "20 to 29 days", 'Everyday',
                                      ifelse(q29 == "All 30 days", 'Everyday', q29)))))))) 


# 
# df <- mutate(df,
#              condom_use = ifelse(q47 == "No" , "0",
#                                  ifelse(q47 == "Yes", "1",
#                                         ifelse(q47 == "Never had sex", "Never had sex", q47))))




#'Parents_understand_problems' Q56
df <- mutate(df,
             parent_understand_problems = ifelse(q56 == "Never", "0",
                                            ifelse(q56 == "Rarely", "0",
                                             ifelse(q56 == "Sometimes", "0",
                                              ifelse(q56 == "Most of the time", "1",
                                               ifelse(q56 == "Always", "1", q56 ))))))
                                                  
           


# parents were aware of free time activities

df <- df %>%
  mutate(
    q57 = recode(q57,
                 `Never` = '0',
                 `Rarely` = '0',
                 `Sometimes` = '0',
                 `Most of the time` = '1',
                 `Always` = '1'))



# Parent go throught things

# df <- df %>%
#    mutate(
#     q58 = recode(q58,
#                    `Never` = 0,
#                    `Rarely` = 1,
#                    `Rarely` = 2,
#                    `Rarely` = 1,
#                    `Mostly` = 3,
#                    `Mostly` = 4,
#                    `Mostly` = 5))
                 
                 

# other students kind and helpful

df <- df%>%
  mutate(q54 = recode(q54,
                      `Never` = '0',
                      `Rarely` = '0',
                      `Sometimes` = '0',
                      `Most of the time` = '1',
                      `Always` = '1'))


# currently smoked cigarettes QN29 (think of Q29 as well)

df <- df%>% 
  mutate(
    smoking_yes_no= recode(q29,
               `0 days` = 0,
               `1 or 2 days` = 1,
               `3 to 5 days` = 1,
               `6 to 9 days` = 1,
               `10 to 19 days` = 1,
               `20 to 29 days`= 1))

# Recode the Bullied variable
df <- df %>%
  mutate(
    q20 = recode(q20, 
                     `0` = "0 days", 
                     `1` = "1 or more times"))

# # Anxiety recode
# df <- df %>%
#   mutate(
#     Anxiety = recode(Anxiety, 
#                      `1` = "Most of the times/always", 
#                      `0` = "Never/rarely/sometimes", 
#                      .default = NA_character_)
#   )



#recode physical fighting

df <- mutate(df,
             physical_fight_binary = case_when(q16 == "0 times" ~ "0",
                                      q16 %in% c("1 time", "2 or 3 times", 
                                                 "4 or 5 times", "6 or 7 times",
                                                 "8 or 9 times","10 or 11 times",
                                                 "12 or more times") ~ "1",
                                                    TRUE ~ q16))




# education code to actual grade
df <-  mutate(df,
              education = case_when(
                  q3 %in% c("M 3", "Class 7")  ~ "Grade 7",
                  q3 %in% c("M 4", "Class 8") ~ "Grade 8",
                  q3 %in% c("M 5", "Class 9") ~ "Grade 9",
                  q3 %in% c("M 6","Class 10") ~ "Grade 10",
                  q3 %in% c("M 7","Class 11") ~ "Grade 11",
                  q3 == "6" ~ "Grade 6",                                                TRUE ~ q3 ))

df <- as.data.frame(lapply(df, as.factor))

```

```{r}
table(df$q5)
table(df$q4)
```

```{r}
# converting the data type as numberic

df <- df %>% 
  mutate (
    weight = as.numeric(weight),
    psu = as.numeric(psu),
    stratum = as.numeric(stratum)
  )

# Create the survey design object 
svy_dataset <- svydesign(
  data = df,                      # Use the entire dataset
  ids = ~ psu,                       # Primary Sampling Units variable
  strata = ~ stratum,                # Stratum variable
  weights = ~ weight, nest = TRUE                # Weights variable
)

```

```{r}


catagorical_column <-  c("q2", "q6","age_category", "q17", "q20","education", "smoking_status", "smoking_frequency", "other_tobacco_use", "current_marijuna_use", "marijuna_use_frequency" , "physical_fight_binary" )



cat_tab1 <- df %>%
 select(all_of(catagorical_column)) %>%
 summary()


```

```{r}
# characteristics of the respondents
svy_dataset %>% 
  tbl_svysummary(include = c("q2", "q6","age_category", "q17", "q20","education", "smoking_status", "smoking_frequency", "other_tobacco_use", "current_marijuna_use", "marijuna_use_frequency" , "physical_fight_binary", "q3"), statistic = list(all_categorical()~"{n} ({p})",all_continuous()~"{mean} ({sd})"),
 digits = list(all_categorical()~c(0,1),
                              all_continuous()~c(1,1,1))) |> 
  add_ci(method = all_continuous() ~ "svymean",
         style_fun = list(all_categorical() ~ purrr::partial(style_percent, digits = 1),
                          all_continuous()~purrr::partial(style_number, digits=1))) |> 
  # add_overall() |> 
  as_hux_xlsx("characteristics.xlsx")


```

```{cat_tab1}
```
